/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* 
- Universal Selector
- CSS inside performs a complete reset of our webpage

- box-sizing -> default heights and widths properties
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* 
- Fonts should be declared inside body
- To add spacing around the entire webpage add a padding to the body
*/
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

/* 
- vh (viewport height) is the % of the screen covered.
- To define a url wrap it inside of a url()
- Gradients should always be defined inside the background-image
- You can layer background-images by adding comas
- Position relative provides a reference of where children elements should position themselves relative from
*/
.header {
    height: 95vh;
    /* 
    - background-size: cover; -> Makes image cover the available space
    - linear-gradient(to [direction(s)], color #1, color #2, etc...) 
    */
    background-image: linear-gradient(to right bottom,rgba(128, 214, 113, 0.8), rgba(39, 180, 133, 0.8)), url("../img/hero.jpg");
    background-size: cover;
    background-position: top;
    position: relative;

    /* 
    - clip-path: [shape]; -> From a path makes everything visible while the rest is hidden
    - polygon([...args(x y)]) -> Lets you build complex shapes with CSS
    */
    clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}

/* 
- Positioning using absolute provides properties like top and right to nudge a DOM element in a certain position
*/
.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px;
}

/* 
- When centering elements that don't set their point of origin in the middle of the element set a translate of -50% of the element
- Translate coordinates % is based on element properties
*/
.text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* 
    - transform: translate(<transform-list>) -> Translates the element given the list of coordinates
    */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    margin-bottom: 60px;
}

/* 
- A solution to create line breaks is to make elements block level elements
*/
.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-iteration-count: 2; */
    /* animation-delay: 3s; */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out;
}

/* 
- Keyframes allow you to build custom animations for css
- You can add any % based on when you want something to occur
- You should only really ever use opacity and transform during animations as thats what browsers are optimized for
- You can "stack" transform properties
- rotate has a unit called deg
- Animations can also be used in psuedo-classes like hover
*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }   
    
    80% {
        transform: translateX(10px);
    }

    100% {
        opacity: 1;
        /* Resets any translate */
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }   
    
    80% {
        transform: translateX(-10px);
    }

    100% {
        opacity: 1;
        /* Resets any translate */
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }   

    100% {
        opacity: 1;
        /* Resets any translate */
        transform: translate(0);
    }
}

/* 
:link -> psuedo-class which targets links that haven't been clicked
:visited -> psuedo-class which targets links that have already been visited
*/
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    /* Allows for resizing width & height/padding & margin while acting like an inline */
    display: inline-block;
    border-radius: 100px;
    transition: all .2s;
    position: relative;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, .2);
}

/* 
:active -> when element is active (clicked)
*/
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
}

.btn-white {
    background-color: white;
    color: #777;
}

/* 
- Creates a psuedo-element that's a child of the original element
- A context property and display must be set
*/
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn-white::after {
    background-color: white;
}

/* 
- Performs operations on the ::after element when the btn is hovered
*/
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /* 
    animation-fill-mode: backwards; -> applys the 0% animation before the animation begins
    */
    animation-fill-mode: backwards;
}